for (element in as.character(date)){
dat <- as.POSIXct(paste(element, "23:59:00"), format="%Y-%m-%d %H:%M:%S")
x.inter <- append(x.inter, dat)
}
inter.result <- approx(x = ex, y = readings, xout=x.inter)
points(inter.result$x, inter.result$y, pch = 2)
legend("topleft", legend = c("data", "interpolated"), pch = c(1,2), col=c("Red", "Black"))
diff_buil <- diff(inter.result$y)
print(diff_buil)
print(date)
date_diff = data.frame(date_2, diff_buil)
colnames(date_diff) <- c('date','consumption')
df_new <- rbind.data.frame(df_new, date_diff)
date_diff = data.frame()
}
# Read all data into a single dataframe
df_raw <- do.call(rbind, lapply(files, read.table, sep=";", dec= ","))
df_raw <- df_raw[,c(1,2,4)]
# Keep only columns 1, 2 and 4 ("ID", "Time" and "Reading")
names(df_raw) <- c("ID", "Time", "Reading")
df_raw$Reading <- as.numeric(df_raw$Reading)
# Exclude meters with less than 121 records
count_list <- count(df_raw, ID)
count_list <- count_list[count_list$n < 121,]
for (j in 1:nrow(count_list)){
df_raw<- df_raw[!(df_raw$ID == count_list$ID[j]), ]
}
# Interpolation
library(stringr)
df_raw$Time <- as.POSIXct(strptime(df_raw$Time, format = "%d-%m-%Y %H.%M"))
# df split in IDs
split_data = split(df_raw, df_raw$ID)
# define the df with Date and ID
day_2 <- data.frame(str_split_fixed(df_raw$Time, " ", 2))
date <- day_2[,1]
df <- cbind(date, df_raw)
df <- df[,c(-3)]
df_new <- data.frame("date" = 0, "consumption" = 0)
for (i in split_data){
x <- i
x <- x[order(x$Time),]
readings <- x[,c(3)]
ex <- x[,c(2)]
day <- data.frame(str_split_fixed(x$Time, " ", 2))
date <- day[,1]
hour <- day[,2]
plot(readings~ex, xlab="Date", ylab="Readings", col=("Red"))
x.inter <- list()
for (element in as.character(date)){
dat <- as.POSIXct(paste(element, "23:59:00"), format="%Y-%m-%d %H:%M:%S")
x.inter <- append(x.inter, dat)
}
inter.result <- approx(x = ex, y = readings, xout=x.inter)
points(inter.result$x, inter.result$y, pch = 2)
legend("topleft", legend = c("data", "interpolated"), pch = c(1,2), col=c("Red", "Black"))
diff_buil <- diff(inter.result$y)
print(diff_buil)
print(date)
date_2 <- date[1:120]
date_diff = data.frame(date_2, diff_buil)
colnames(date_diff) <- c('date','consumption')
df_new <- rbind.data.frame(df_new, date_diff)
date_diff = data.frame()
}
View(df_new)
df <- cbind.data.frame(df, df_new)
# Erase duplicate dates
df <- df[!duplicated(as.list(df))]
# Erase an extra column
#df <- df[,-1]
# change column names
colnames(df) <- c('date','ID','consumption')
View(df)
df_final <- full_join(df, df_new, by = "date")
View(df_final)
df <- df[,-3]
df_final <- full_join(df, df_new, by = "date")
View(df_final)
df <- df[,-3]
df_final <- full_join(df, df_new, by = "date")
total <- merge(df,df_new,by="data")
total <- merge(df,df_new,by="date")
View(total)
df_new %>% drop_na()
total <- merge(df,df_new,by="date")
View(total)
merged_df <- full_join(df, df_new, by = "date")
View(x)
df_new <- data.frame("ID"= 0,"date" = 0, "consumption" = 0)
for (i in split_data){
x <- i
x <- x[order(x$Time),]
readings <- x[,c(3)]
ex <- x[,c(2)]
day <- data.frame(str_split_fixed(x$Time, " ", 2))
date <- day[,1]
hour <- day[,2]
plot(readings~ex, xlab="Date", ylab="Readings", col=("Red"))
x.inter <- list()
for (element in as.character(date)){
dat <- as.POSIXct(paste(element, "23:59:00"), format="%Y-%m-%d %H:%M:%S")
x.inter <- append(x.inter, dat)
}
inter.result <- approx(x = ex, y = readings, xout=x.inter)
points(inter.result$x, inter.result$y, pch = 2)
legend("topleft", legend = c("data", "interpolated"), pch = c(1,2), col=c("Red", "Black"))
diff_buil <- diff(inter.result$y)
print(diff_buil)
print(date)
date_2 <- date[1:120]
date_diff = data.frame(x$ID,date_2, diff_buil)
colnames(date_diff) <- c('ID','date','consumption')
df_new <- rbind.data.frame(df_new, date_diff)
date_diff = data.frame()
}
df_new <- data.frame("ID"= 0,"date" = 0, "consumption" = 0)
for (i in split_data){
x <- i
x <- x[order(x$Time),]
readings <- x[,c(3)]
ex <- x[,c(2)]
day <- data.frame(str_split_fixed(x$Time, " ", 2))
date <- day[,1]
hour <- day[,2]
plot(readings~ex, xlab="Date", ylab="Readings", col=("Red"))
x.inter <- list()
for (element in as.character(date)){
dat <- as.POSIXct(paste(element, "23:59:00"), format="%Y-%m-%d %H:%M:%S")
x.inter <- append(x.inter, dat)
}
inter.result <- approx(x = ex, y = readings, xout=x.inter)
points(inter.result$x, inter.result$y, pch = 2)
legend("topleft", legend = c("data", "interpolated"), pch = c(1,2), col=c("Red", "Black"))
diff_buil <- diff(inter.result$y)
print(diff_buil)
print(date)
date_2 <- date[1:120]
idesito <- x$ID
date_diff = data.frame(x$ID,date_2, diff_buil)
colnames(date_diff) <- c('ID','date','consumption')
df_new <- rbind.data.frame(df_new, date_diff)
date_diff = data.frame()
}
df_new <- data.frame("ID"= 0,"date" = 0, "consumption" = 0)
for (i in split_data){
x <- i
x <- x[order(x$Time),]
readings <- x[,c(3)]
ex <- x[,c(2)]
day <- data.frame(str_split_fixed(x$Time, " ", 2))
date <- day[,1]
hour <- day[,2]
plot(readings~ex, xlab="Date", ylab="Readings", col=("Red"))
x.inter <- list()
for (element in as.character(date)){
dat <- as.POSIXct(paste(element, "23:59:00"), format="%Y-%m-%d %H:%M:%S")
x.inter <- append(x.inter, dat)
}
inter.result <- approx(x = ex, y = readings, xout=x.inter)
points(inter.result$x, inter.result$y, pch = 2)
legend("topleft", legend = c("data", "interpolated"), pch = c(1,2), col=c("Red", "Black"))
diff_buil <- diff(inter.result$y)
print(diff_buil)
print(date)
date_2 <- date[1:120]
id_2 <- x$ID[1:120]
date_diff = data.frame(id_2,date_2, diff_buil)
colnames(date_diff) <- c('ID','date','consumption')
df_new <- rbind.data.frame(df_new, date_diff)
date_diff = data.frame()
}
View(df_new)
View(df_new)
df_new <-df_new[-1,-1]
# Merge with WU
merged_df <- full_join(mean_mode, df, by = "date")
htk <- read_excel("~/Github/02441_Applied_Statistics/Case2/2_Data/HTK_building_data_share.xlsx")
load("~/Github/02441_Applied_Statistics/Case2/2_Data/WUndergroundHourly.RData")
summary(WG)
# Remove NA columns
data_0 <- Filter(function(x)!all(is.na(x)), WG)
# Check removed columns
setdiff(names(WG),names(data_0))
# Remove columns with fixed values
data <- Filter(function(x) length(unique(x))!=1, data_0)
# Check removed columns
setdiff(names(data_0),names(data))
# Change full date to short date
day <- data.frame(str_split_fixed(data$date, " ", 2))
day <- day[,-2]
data<- cbind(day, data)
data <- data[,-2]
# Check summary and structure of data
summary(data)
str(data)
# Factorize cond, and dir
data$cond <- factor(data$cond)
data$dir <- factor(data$dir)
# Sanity-check
str(data)
# Calculate mean value for continuous and mode for factor variables
# Create a mode function
getmode <- function(v) {
uniqv <- na.omit(unique(v))
uniqv[which.max(tabulate(match(v, uniqv)))]
}
# Create a data frame for the means and the modes
mean_mode <- cbind.data.frame(day)
# it has only unique values, remove repeated dates
mean_mode <- unique(mean_mode)
# get the column names
names <- colnames(data)
# Empty cells --> NA
data$cond[data$cond==""]  <- NA
data$dir [data$dir ==""]  <- NA
# Calculate the mean and mode for each colum of the df
for (i in 2:ncol(data)){
if (is.numeric(data[,i]) == FALSE){
values <- cbind.data.frame(data$day, data[,i])
colnames(values) <- c("date","value")
mode_value<- aggregate(values$value,list(values$date), getmode)
mean_mode <- cbind.data.frame(mean_mode, mode_value)
}
if (is.numeric(data[,i]) == TRUE){
values <- cbind.data.frame(data$day, data[,i])
colnames(values) <- c("date","value")
mean_value <- aggregate(values$value,list(values$date), mean)
mean_mode <- cbind.data.frame(mean_mode, mean_value)
}
}
# Erase duplicate dates
mean_mode <- mean_mode[!duplicated(as.list(mean_mode))]
# Erase an extra column
mean_mode <- mean_mode[,-1]
# change column names
colnames(mean_mode) <- names
# Merge with WU
merged_df <- full_join(mean_mode, df, by = "date")
View(mean_mode)
names
# Merge with WU
colnames(mean_mode) <- c("date", "temp","dew_pt","hum","wind_spd","dir","vis","pressure","cond","fog","rain","snow")
View(mean_mode)
merged_df <- full_join(mean_mode, df, by = "date")
View(merged_df)
caca <- read_csv("~/Github/02441_Applied_Statistics/Case2/2_Data/merged_data.csv")
View(caca)
df_new <-df_new[-1,-1]
# Merge with WU
colnames(mean_mode) <- c("date", "temp","dew_pt","hum","wind_spd","dir","vis","pressure","cond","fog","rain","snow")
merged_df <- full_join(mean_mode, df_new, by = "date")
df_new <-df_new[-1,-1]
htk <- read_excel("~/Github/02441_Applied_Statistics/Case2/2_Data/HTK_building_data_share.xlsx")
load("~/Github/02441_Applied_Statistics/Case2/2_Data/WUndergroundHourly.RData")
files <- dir("~/Github/02441_Applied_Statistics/Case2/2_Data/meterdata", pattern="*.txt", full.names=TRUE)
summary(WG)
# Remove NA columns
data_0 <- Filter(function(x)!all(is.na(x)), WG)
# Check removed columns
setdiff(names(WG),names(data_0))
# Remove columns with fixed values
data <- Filter(function(x) length(unique(x))!=1, data_0)
# Check removed columns
setdiff(names(data_0),names(data))
# Change full date to short date
day <- data.frame(str_split_fixed(data$date, " ", 2))
day <- day[,-2]
data<- cbind(day, data)
data <- data[,-2]
# Check summary and structure of data
summary(data)
str(data)
# Factorize cond, and dir
data$cond <- factor(data$cond)
data$dir <- factor(data$dir)
# Sanity-check
str(data)
# Calculate mean value for continuous and mode for factor variables
# Create a mode function
getmode <- function(v) {
uniqv <- na.omit(unique(v))
uniqv[which.max(tabulate(match(v, uniqv)))]
}
# Create a data frame for the means and the modes
mean_mode <- cbind.data.frame(day)
# it has only unique values, remove repeated dates
mean_mode <- unique(mean_mode)
# get the column names
names <- colnames(data)
# Empty cells --> NA
data$cond[data$cond==""]  <- NA
data$dir [data$dir ==""]  <- NA
# Calculate the mean and mode for each colum of the df
for (i in 2:ncol(data)){
if (is.numeric(data[,i]) == FALSE){
values <- cbind.data.frame(data$day, data[,i])
colnames(values) <- c("date","value")
mode_value<- aggregate(values$value,list(values$date), getmode)
mean_mode <- cbind.data.frame(mean_mode, mode_value)
}
if (is.numeric(data[,i]) == TRUE){
values <- cbind.data.frame(data$day, data[,i])
colnames(values) <- c("date","value")
mean_value <- aggregate(values$value,list(values$date), mean)
mean_mode <- cbind.data.frame(mean_mode, mean_value)
}
}
# Erase duplicate dates
mean_mode <- mean_mode[!duplicated(as.list(mean_mode))]
# Erase an extra column
mean_mode <- mean_mode[,-1]
# change column names
colnames(mean_mode) <- names
# Meter -------------------------------------------------------------------
# Read all data into a single dataframe
df_raw <- do.call(rbind, lapply(files, read.table, sep=";", dec= ","))
df_raw <- df_raw[,c(1,2,4)]
# Keep only columns 1, 2 and 4 ("ID", "Time" and "Reading")
names(df_raw) <- c("ID", "Time", "Reading")
df_raw$Reading <- as.numeric(df_raw$Reading)
# Exclude meters with less than 121 records
count_list <- count(df_raw, ID)
count_list <- count_list[count_list$n < 121,]
for (j in 1:nrow(count_list)){
df_raw<- df_raw[!(df_raw$ID == count_list$ID[j]), ]
}
# Interpolation
library(stringr)
df_raw$Time <- as.POSIXct(strptime(df_raw$Time, format = "%d-%m-%Y %H.%M"))
# df split in IDs
split_data = split(df_raw, df_raw$ID)
# define the df with Date and ID
day_2 <- data.frame(str_split_fixed(df_raw$Time, " ", 2))
date <- day_2[,1]
df <- cbind(date, df_raw)
df <- df[,c(-3)]
df_new <- data.frame("ID"= 0,"date" = 0, "consumption" = 0)
for (i in split_data){
x <- i
x <- x[order(x$Time),]
readings <- x[,c(3)]
ex <- x[,c(2)]
day <- data.frame(str_split_fixed(x$Time, " ", 2))
date <- day[,1]
hour <- day[,2]
plot(readings~ex, xlab="Date", ylab="Readings", col=("Red"))
x.inter <- list()
for (element in as.character(date)){
dat <- as.POSIXct(paste(element, "23:59:00"), format="%Y-%m-%d %H:%M:%S")
x.inter <- append(x.inter, dat)
}
inter.result <- approx(x = ex, y = readings, xout=x.inter)
points(inter.result$x, inter.result$y, pch = 2)
legend("topleft", legend = c("data", "interpolated"), pch = c(1,2), col=c("Red", "Black"))
diff_buil <- diff(inter.result$y)
print(diff_buil)
print(date)
date_2 <- date[1:120]
id_2 <- x$ID[1:120]
date_diff = data.frame(id_2,date_2, diff_buil)
colnames(date_diff) <- c('ID','date','consumption')
df_new <- rbind.data.frame(df_new, date_diff)
date_diff = data.frame()
}
df_new <-df_new[-1,-1]
# Merge with WU
colnames(mean_mode) <- c("date", "temp","dew_pt","hum","wind_spd","dir","vis","pressure","cond","fog","rain","snow")
merged_df <- full_join(mean_mode, df_new, by = "date")
merged_df <- merge(mean_mode, df_new, by = "date")
merged_df <- merge(mean_mode, df_new, by = c("date","ID"))
#########################################################################
## Case 2:                                                             ##
## HTK Case: Energy performance of buildings                           ##
#########################################################################
# Authors: Bego?a Bolos Sierra, Laura Sans Comerma, Jorge Montalvo Arvizu
# Load Packages ---------------------------------------------------------------
require("car")
require("tidyverse")
library("stringr")
require("readxl")
require("lubridate")
library("dplyr")
# Visualization packages
require("xtable")
require("ggpubr")
require("ggplot2")
require("ggExtra")
require("GGally")
require('ggcorrplot')
require("gridExtra")
# Load data ----------------------------------------------------------
htk <- read_excel("~/Github/02441_Applied_Statistics/Case2/2_Data/HTK_building_data_share.xlsx")
load("~/Github/02441_Applied_Statistics/Case2/2_Data/WUndergroundHourly.RData")
files <- dir("~/Github/02441_Applied_Statistics/Case2/2_Data/meterdata", pattern="*.txt", full.names=TRUE)
# WUnderground ----------------------------------------------------------------
summary(WG)
# Remove NA columns
data_0 <- Filter(function(x)!all(is.na(x)), WG)
# Check removed columns
setdiff(names(WG),names(data_0))
# Remove columns with fixed values
data <- Filter(function(x) length(unique(x))!=1, data_0)
# Check removed columns
setdiff(names(data_0),names(data))
# Change full date to short date
day <- data.frame(str_split_fixed(data$date, " ", 2))
day <- day[,-2]
data<- cbind(day, data)
data <- data[,-2]
# Check summary and structure of data
summary(data)
str(data)
# Factorize cond, and dir
data$cond <- factor(data$cond)
data$dir <- factor(data$dir)
# Sanity-check
str(data)
# Calculate mean value for continuous and mode for factor variables
# Create a mode function
getmode <- function(v) {
uniqv <- na.omit(unique(v))
uniqv[which.max(tabulate(match(v, uniqv)))]
}
# Create a data frame for the means and the modes
mean_mode <- cbind.data.frame(day)
# it has only unique values, remove repeated dates
mean_mode <- unique(mean_mode)
# get the column names
names <- colnames(data)
# Empty cells --> NA
data$cond[data$cond==""]  <- NA
data$dir [data$dir ==""]  <- NA
# Calculate the mean and mode for each colum of the df
for (i in 2:ncol(data)){
if (is.numeric(data[,i]) == FALSE){
values <- cbind.data.frame(data$day, data[,i])
colnames(values) <- c("date","value")
mode_value<- aggregate(values$value,list(values$date), getmode)
mean_mode <- cbind.data.frame(mean_mode, mode_value)
}
if (is.numeric(data[,i]) == TRUE){
values <- cbind.data.frame(data$day, data[,i])
colnames(values) <- c("date","value")
mean_value <- aggregate(values$value,list(values$date), mean)
mean_mode <- cbind.data.frame(mean_mode, mean_value)
}
}
# Erase duplicate dates
mean_mode <- mean_mode[!duplicated(as.list(mean_mode))]
# Erase an extra column
mean_mode <- mean_mode[,-1]
# change column names
colnames(mean_mode) <- names
# Meter -------------------------------------------------------------------
# Read all data into a single dataframe
df_raw <- do.call(rbind, lapply(files, read.table, sep=";", dec= ","))
df_raw <- df_raw[,c(1,2,4)]
# Keep only columns 1, 2 and 4 ("ID", "Time" and "Reading")
names(df_raw) <- c("ID", "Time", "Reading")
df_raw$Reading <- as.numeric(df_raw$Reading)
# Exclude meters with less than 121 records
count_list <- count(df_raw, ID)
count_list <- count_list[count_list$n < 121,]
for (j in 1:nrow(count_list)){
df_raw<- df_raw[!(df_raw$ID == count_list$ID[j]), ]
}
# Interpolation
library(stringr)
df_raw$Time <- as.POSIXct(strptime(df_raw$Time, format = "%d-%m-%Y %H.%M"))
# df split in IDs
split_data = split(df_raw, df_raw$ID)
# define the df with Date and ID
day_2 <- data.frame(str_split_fixed(df_raw$Time, " ", 2))
date <- day_2[,1]
df <- cbind(date, df_raw)
df <- df[,c(-3)]
df_new <- data.frame("ID"= 0,"date" = 0, "consumption" = 0)
for (i in split_data){
x <- i
x <- x[order(x$Time),]
readings <- x[,c(3)]
ex <- x[,c(2)]
day <- data.frame(str_split_fixed(x$Time, " ", 2))
date <- day[,1]
hour <- day[,2]
plot(readings~ex, xlab="Date", ylab="Readings", col=("Red"))
x.inter <- list()
for (element in as.character(date)){
dat <- as.POSIXct(paste(element, "23:59:00"), format="%Y-%m-%d %H:%M:%S")
x.inter <- append(x.inter, dat)
}
inter.result <- approx(x = ex, y = readings, xout=x.inter)
points(inter.result$x, inter.result$y, pch = 2)
legend("topleft", legend = c("data", "interpolated"), pch = c(1,2), col=c("Red", "Black"))
diff_buil <- diff(inter.result$y)
date_2 <- date[1:120]
id_2 <- x$ID[1:120]
date_diff = data.frame(id_2,date_2, diff_buil)
colnames(date_diff) <- c('ID','date','consumption')
df_new <- rbind.data.frame(df_new, date_diff)
date_diff = data.frame()
}
View(df_new)
df_new <-df_new[-1,]
# Merge with WU
colnames(mean_mode) <- c("date", "temp","dew_pt","hum","wind_spd","dir","vis","pressure","cond","fog","rain","snow")
merged_df <- merge(mean_mode, df_new, by = "date")
# Load Data ---------------------------------------------------------------
# Load CampusNet Merged Data
df <- read_csv("~/Github/02441_Applied_Statistics/Case2/2_Data/merged_data.csv")
summary(merged_df)
summary(df)
