# Build a data frame
edat <- data.frame(source=c("X", "Y", "Z"), target=c("Z", "X", "Y"), e=c(-1,-1, -1),
k=c(0.25, 0.25, 0.25), n=c(Inf, Inf, Inf), stringsAsFactors=FALSE)
circ <- set_edges(x=circ, dat=edat)
# Plot the circuit nodes/edges
ig <- graph_from_data_frame(d=edat, vertices=data.frame(id=c("X","Y","Z")), directed=TRUE)
print(plot(ig))
# Build the circuit environment
circEnv <- circuitEnv(circ, times=seq(0,20, 0.01))
circEnv <- set_nlevels(x=circEnv, nlevels=c("X"=0,"Y"=1, "Z"=1), t.st=0, t.en=0)
circEnv <- set_signals(x=circEnv, signals=c("X"=1,"Y"=1, "Z"=1), t.st=c(2,0,0), t.en=c(16,20,20))
# Integrate the circuit
circEnv <- integrator(circEnv)
# Plot the circuit levels
plot(x=circEnv, ids.nlevels=c("X", "Y", "Z"), xlim=c(0,20), ylim=c(0,1), xlab="Times", ylab="x", main="Repressilator")
print(plot)
#### Visualization the phase space trajectory ####
V <- get_state(x=rep8tre, attr="nlevels", times=seq(0,20, 0.01))
ssCols <- colorRampPalette(brewer.pal(11,"Spectral"))
colorBar <- function(colFcn, yMin=1, yMax=10, divs=100) {
z <- matrix(1:divs, nrow=1)
y <- seq(yMin, yMax, len=divs)
image(1, y, z, col=colFcn(divs), axes=FALSE, xlab="", ylab="" )
axis(2, las=2)
}
times <- seq(0, 20, 0.01) ## as defined for the circuit environment
lgc <- 0 < times & times < 8
layout(mat=matrix(c(1,2), 1,2), widths=c(3,1))
plot(V[lgc, "X"], V[lgc, "Y"], pch=19, xlab="[X]", ylab="[Y]",
main="X-Y phase space", col=ssCols(sum(lgc)))
colorBar(ssCols, 0, 8, main="time")
y <- 3
y
x <- c(1, 4, 6, 2)
x
x <- 1:10
x
x <- seq(0,1 by=0.1)
x <- seq(0,1, by=0.1)
x
mean(x)
var(x)
sd(x)
median(x)
quantile(x, c(0.25, 0.5, 0.75))
cov(x, y)
x <- c(168, 161, 167,179, 184, 166, 198, 187, 191, 179)
mean(x)
median(x)
var(x)
sd(x)
quantile(x, type=2)
quantile(x, probs=seq(0,1,by=0.1), type=2)
hist(X)
hist(x)
hist(x, prob=TRUE, col="red", nclass=8)
plot(ecdf(x), verticals=TRUE)
boxplot(x, range=0, col="red", main="Basic box plot")
## Add the blue text
text(1.3, quantile(x), c("Minimum","Q1","Median","Q3","Maximum"),
col="blue")
boxplot(c(x, 235), col="red", main="Modified box plot")
boxplot(c(x, 235), col="red", main="Modified box plot")
boxplot(c(x, 235), col="red", main="Basic box plot", range=0)
getwd
getwd()
setwd("~/Github/02441_Applied_Statistics/Case2/3_Scripts")
# Load Data ---------------------------------------------------------------
load.Rdata2("WUndergroundHourly.RData", path="~/Github/02441_Applied_Statistics/Case2/2_Data")
# Load Data ---------------------------------------------------------------
load("WUndergroundHourly.RData", path="~/Github/02441_Applied_Statistics/Case2/2_Data")
# Load Data ---------------------------------------------------------------
load("~/Github/02441_Applied_Statistics/Case2/2_Data/WUndergroundHourly.RData")
View(WG)
View(WG)
data <- WG[,-c(6,7,10,11,12,13,14,18,19,20,21)]
View(data)
# Load Data ---------------------------------------------------------------
load("~/Github/02441_Applied_Statistics/Case2/2_Data/WUndergroundHourly.RData")
data <- WG[!sapply(mydf, function(x) all(x == ""))]
data[!sapply(WG, function(x) all(x == ""))]
#data <- WG[,-c(6,7,10,11,12,13,14,18,19,20,21)]
data[, colSums(WG != "") != 0]
#data <- WG[,-c(6,7,10,11,12,13,14,18,19,20,21)]
data[, colSums(WG != NA) != 0]
#data <- WG[,-c(6,7,10,11,12,13,14,18,19,20,21)]
data[, colSums(WG != NA) != 0]
#data <- WG[,-c(6,7,10,11,12,13,14,18,19,20,21)]
data <- Filter(function(x)!all(is.na(x)), WG)
# Load Data ---------------------------------------------------------------
load("~/Github/02441_Applied_Statistics/Case2/2_Data/WUndergroundHourly.RData")
#data <- WG[,-c(6,7,10,11,12,13,14,18,19,20,21)]
data_0 <- Filter(function(x)!all(is.na(x)), WG)
data <- Filter(function(x) length(unique(x))==1, data_0)
View(data)
# Load Data ---------------------------------------------------------------
load("~/Github/02441_Applied_Statistics/Case2/2_Data/WUndergroundHourly.RData")
#data <- WG[,-c(6,7,10,11,12,13,14,18,19,20,21)]
data_0 <- Filter(function(x)!all(is.na(x)), WG)
data <- Filter(function(x) length(unique(x))!=1, data_0)
View(data)
str(data)
data$fog <- factor(data$fog)
data$fog <- factor(data$fog)
data$rain <- factor(data$rain)
data$snow <- factor(data$snow)
str(data)
mean_continuous <- aggregate(data[,2:], list(Date=data$date), mean)
mean_temp <- aggregate(data$temp, list(Date=data$date), mean)
View(mean_temp)
library(stringr)
str_split_fixed(data$date, " ", 2)
day<- str_split_fixed(data$date, " ", 2)
View(day)
data <- str_split_fixed(data$date, " ", 2)
load("~/Github/02441_Applied_Statistics/Case2/2_Data/WUndergroundHourly.RData")
# Remove NA columns
data_0 <- Filter(function(x)!all(is.na(x)), WG)
# Remove columns with fixed values
data <- Filter(function(x) length(unique(x))!=1, data_0)
library(stringr)
data <- str_split_fixed(data$date, " ", 2)
# Factorize fog, rain, snow. it is a binary attribute
data$fog <- factor(data$fog)
data$rain <- factor(data$rain)
data$snow <- factor(data$snow)
load("~/Github/02441_Applied_Statistics/Case2/2_Data/WUndergroundHourly.RData")
# Remove NA columns
data_0 <- Filter(function(x)!all(is.na(x)), WG)
# Remove columns with fixed values
data <- Filter(function(x) length(unique(x))!=1, data_0)
library(stringr)
data <- str_split_fixed(data$date, " ", 2)
View(WG)
View(data_0)
View(data)
day_hours <- day_hours[,-2]
# Load Data ---------------------------------------------------------------
load("~/Github/02441_Applied_Statistics/Case2/2_Data/WUndergroundHourly.RData")
# Remove NA columns
data_0 <- Filter(function(x)!all(is.na(x)), WG)
# Remove columns with fixed values
data <- Filter(function(x) length(unique(x))!=1, data_0)
library(stringr)
day_hours <- str_split_fixed(data$date, " ", 2)
# Load Data ---------------------------------------------------------------
load("~/Github/02441_Applied_Statistics/Case2/2_Data/WUndergroundHourly.RData")
load("~/Github/02441_Applied_Statistics/Case2/2_Data/WUndergroundHourly.RData")
# Remove NA columns
data_0 <- Filter(function(x)!all(is.na(x)), WG)
# Remove columns with fixed values
data <- Filter(function(x) length(unique(x))!=1, data_0)
library(stringr)
day_hours <- str_split_fixed(data$date, " ", 2)
day_hours <- day_hours[,-2]
load("~/Github/02441_Applied_Statistics/Case2/2_Data/WUndergroundHourly.RData")
# Remove NA columns
data_0 <- Filter(function(x)!all(is.na(x)), WG)
# Remove columns with fixed values
data <- Filter(function(x) length(unique(x))!=1, data_0)
library(stringr)
day_hours <- str_split_fixed(data$date, " ", 2)
day_hours <- day_hours[,-2]
load("~/Github/02441_Applied_Statistics/Case2/2_Data/WUndergroundHourly.RData")
# Remove NA columns
data_0 <- Filter(function(x)!all(is.na(x)), WG)
# Remove columns with fixed values
data <- Filter(function(x) length(unique(x))!=1, data_0)
library(stringr)
day_hours <- data.frame(str_split_fixed(data$date, " ", 2))
day_hours <- day_hours[,-2]
$
day_hours <- data.frame(str_split_fixed(data$date, " ", 2))
View(day_hours)
day_hours <- day_hours[,-2]
load("~/Github/02441_Applied_Statistics/Case2/2_Data/WUndergroundHourly.RData")
# Remove NA columns
data_0 <- Filter(function(x)!all(is.na(x)), WG)
# Remove columns with fixed values
data <- Filter(function(x) length(unique(x))!=1, data_0)
library(stringr)
day_hours <- data.frame(str_split_fixed(data$date, " ", 2))
data <- day[,-1]
data <- day_hours + data
load("~/Github/02441_Applied_Statistics/Case2/2_Data/WUndergroundHourly.RData")
# Remove NA columns
data_0 <- Filter(function(x)!all(is.na(x)), WG)
# Remove columns with fixed values
data <- Filter(function(x) length(unique(x))!=1, data_0)
library(stringr)
day_hours <- data.frame(str_split_fixed(data$date, " ", 2))
data <- day_hours[,-1]
load("~/Github/02441_Applied_Statistics/Case2/2_Data/WUndergroundHourly.RData")
# Remove NA columns
data_0 <- Filter(function(x)!all(is.na(x)), WG)
# Remove columns with fixed values
data <- Filter(function(x) length(unique(x))!=1, data_0)
library(stringr)
day_hours <- data.frame(str_split_fixed(data$date, " ", 2))
data <- day_hours + data
data <- merge(data,day_hours)
View(data)
View(data)
View(data)
load("~/Github/02441_Applied_Statistics/Case2/2_Data/WUndergroundHourly.RData")
# Remove NA columns
data_0 <- Filter(function(x)!all(is.na(x)), WG)
# Remove columns with fixed values
data <- Filter(function(x) length(unique(x))!=1, data_0)
library(stringr)
day_hours <- data.frame(str_split_fixed(data$date, " ", 2))
data <- merge(data,day_hours)
View(data)
View(data)
View(data)
load("~/Github/02441_Applied_Statistics/Case2/2_Data/WUndergroundHourly.RData")
# Remove NA columns
data_0 <- Filter(function(x)!all(is.na(x)), WG)
# Remove columns with fixed values
data <- Filter(function(x) length(unique(x))!=1, data_0)
library(stringr)
day_hours <- data.frame(str_split_fixed(data$date, " ", 2))
data <- merge(day_hours,data,by="date")
load("~/Github/02441_Applied_Statistics/Case2/2_Data/WUndergroundHourly.RData")
# Remove NA columns
data_0 <- Filter(function(x)!all(is.na(x)), WG)
# Remove columns with fixed values
data <- Filter(function(x) length(unique(x))!=1, data_0)
library(stringr)
day_hours <- data.frame(str_split_fixed(data$date, " ", 2))
data <- merge(day_hours,data)
load("~/Github/02441_Applied_Statistics/Case2/2_Data/WUndergroundHourly.RData")
# Remove NA columns
data_0 <- Filter(function(x)!all(is.na(x)), WG)
# Remove columns with fixed values
data <- Filter(function(x) length(unique(x))!=1, data_0)
library(stringr)
day_hours <- data.frame(str_split_fixed(data$date, " ", 2))
day_hours <- day_hours[,-2]
data <- cbind(day_hours, data)
View(data)
View(data)
data <- data[,-2]
data$fog <- factor(data$fog)
data$rain <- factor(data$rain)
data$snow <- factor(data$snow)
str(data)
#########################################################################
## Case 2:                                                             ##
## HTK Case: Energy performance of buildings                           ##
#########################################################################
# Authors: BegoÃ±a Bolos Sierra, Laura Sans Comerma, Jorge Montalvo Arvizu
# Load Data ---------------------------------------------------------------
load("~/Github/02441_Applied_Statistics/Case2/2_Data/WUndergroundHourly.RData")
# Remove NA columns
data_0 <- Filter(function(x)!all(is.na(x)), WG)
# Remove columns with fixed values
data <- Filter(function(x) length(unique(x))!=1, data_0)
library(stringr)
date <- data.frame(str_split_fixed(data$date, " ", 2))
date <- day_hours[,-2]
data <- cbind(date, data)
data <- data[,-2]
# Factorize fog, rain, snow. it is a binary attribute
data$fog <- factor(data$fog)
data$rain <- factor(data$rain)
data$snow <- factor(data$snow)
str(data)
mean_temp <- aggregate(data$temp, list(Date=data$da), mean)
View(mean_temp)
#########################################################################
## Case 2:                                                             ##
## HTK Case: Energy performance of buildings                           ##
#########################################################################
# Authors: BegoÃ±a Bolos Sierra, Laura Sans Comerma, Jorge Montalvo Arvizu
# Load Data ---------------------------------------------------------------
load("~/Github/02441_Applied_Statistics/Case2/2_Data/WUndergroundHourly.RData")
# Remove NA columns
data_0 <- Filter(function(x)!all(is.na(x)), WG)
# Remove columns with fixed values
data <- Filter(function(x) length(unique(x))!=1, data_0)
library(stringr)
date <- data.frame(str_split_fixed(data$date, " ", 2))
date <- day_hours[,-2]
data <- cbind(date, data)
data <- data[,-2]
# Factorize fog, rain, snow. it is a binary attribute
data$fog <- factor(data$fog)
data$rain <- factor(data$rain)
data$snow <- factor(data$snow)
str(data)
mean_temp <- aggregate(data$temp, list(Date=data$date), mean)
View(mean_temp)
View(data)
#########################################################################
## Case 2:                                                             ##
## HTK Case: Energy performance of buildings                           ##
#########################################################################
# Authors: BegoÃ±a Bolos Sierra, Laura Sans Comerma, Jorge Montalvo Arvizu
# Load Data ---------------------------------------------------------------
load("~/Github/02441_Applied_Statistics/Case2/2_Data/WUndergroundHourly.RData")
# Remove NA columns
data_0 <- Filter(function(x)!all(is.na(x)), WG)
# Remove columns with fixed values
data <- Filter(function(x) length(unique(x))!=1, data_0)
library(stringr)
day <- data.frame(str_split_fixed(data$date, " ", 2))
day <- day_hours[,-2]
data<- cbind(day, data)
data <- data[,-2]
# Factorize fog, rain, snow. it is a binary attribute
data$fog <- factor(data$fog)
data$rain <- factor(data$rain)
data$snow <- factor(data$snow)
str(data)
mean_temp <- aggregate(data$temp, list(Date=data$day), mean)
View(data)
day <- data.frame(str_split_fixed(data$date, " ", 2))
day <- day_hours[,-2]
#########################################################################
## Case 2:                                                             ##
## HTK Case: Energy performance of buildings                           ##
#########################################################################
# Authors: BegoÃ±a Bolos Sierra, Laura Sans Comerma, Jorge Montalvo Arvizu
# Load Data ---------------------------------------------------------------
load("~/Github/02441_Applied_Statistics/Case2/2_Data/WUndergroundHourly.RData")
# Remove NA columns
data_0 <- Filter(function(x)!all(is.na(x)), WG)
# Remove columns with fixed values
data <- Filter(function(x) length(unique(x))!=1, data_0)
library(stringr)
day <- data.frame(str_split_fixed(data$date, " ", 2))
day <- day[,-2]
data<- cbind(day, data)
data <- data[,-2]
# Factorize fog, rain, snow. it is a binary attribute
data$fog <- factor(data$fog)
data$rain <- factor(data$rain)
data$snow <- factor(data$snow)
str(data)
mean_temp <- aggregate(data$temp, list(Date=data$day), mean)
View(mean_temp)
# Factorize fog, rain, snow. it is a binary attribute
data$fog <- factor(data$fog)
data$rain <- factor(data$rain)
data$snow <- factor(data$snow)
data$cond <- factor(data$cond)
data$dir <- factor(data$dir)
str(data)
for (i in data){
if (i != data$day){
if ( str(i) == "Factor"){
mean$i <- aggregate(data$i, list(Date=data$day), mode)
}
if (str(i)== "num"){
mean$i <- aggregate(data$i, list(Date=data$day), mean)
}
}
}
for (i in names(data)){
if (i != data$day){
if ( str(i) == "Factor"){
mean$i <- aggregate(data$i, list(Date=data$day), mode)
}
if (str(i)== "num"){
mean$i <- aggregate(data$i, list(Date=data$day), mean)
}
}
}
for (i in names(data)){
if (i != "day"){
if ( str(i) == "Factor"){
mean$i <- aggregate(data$i, list(Date=data$day), mode)
}
if (str(i)== "num"){
mean$i <- aggregate(data$i, list(Date=data$day), mean)
}
}
}
for (i in 2:nrow(data)){
if ( str(i) == "Factor"){
mode$i <- aggregate(data$i, list(Date=data$day), mode)
}
if (str(i)== "num"){
mean$i <- aggregate(data$i, list(Date=data$day), mean)
}
}
for (i in 2:nrow(data)){
if ( is.numeric(i) == FALSE){
mode$i <- aggregate(data$i, list(Date=data$day), mode)
}
if (is.numeric(i) == TRUE){
mean$i <- aggregate(data$i, list(Date=data$day), mean)
}
}
for (i in 2:nrow(data)){
if (is.numeric(i) == FALSE){
aggregate(data$i, list(Date=data$day), mode)
}
if (is.numeric(i) == TRUE){
aggregate(data$i, list(Date=data$day), mean)
}
}
for (i in 2:nrow(data)){
if (is.numeric(i) == FALSE){
aggregate(i, list(Date=data$day), mode)
}
if (is.numeric(i) == TRUE){
aggregate(i, list(Date=data$day), mean)
}
}
for (i in 2:nrow(data)){
if (is.numeric(i) == FALSE){
mode <- aggregate(i, list(Date=data$day), mode)
}
if (is.numeric(i) == TRUE){
mean <- aggregate(data$i, list(Date=data$day), mean)
}
}
for (i in 2:nrow(data)){
if (is.numeric(i) == FALSE){
mode <- aggregate(data$i, list(Date=data$day), mode)
}
if (is.numeric(i) == TRUE){
mean <- aggregate(data$i, list(Date=data$day), mean)
}
}
#########################################################################
## Case 2:                                                             ##
## HTK Case: Energy performance of buildings                           ##
#########################################################################
# Authors: BegoÃ±a Bolos Sierra, Laura Sans Comerma, Jorge Montalvo Arvizu
# Load Data ---------------------------------------------------------------
load("~/Github/02441_Applied_Statistics/Case2/2_Data/WUndergroundHourly.RData")
# Remove NA columns
data_0 <- Filter(function(x)!all(is.na(x)), WG)
# Remove columns with fixed values
data <- Filter(function(x) length(unique(x))!=1, data_0)
library(stringr)
day <- data.frame(str_split_fixed(data$date, " ", 2))
day <- day[,-2]
data<- cbind(day, data)
data <- data[,-2]
# Factorize fog, rain, snow. it is a binary attribute
data$fog <- factor(data$fog)
data$rain <- factor(data$rain)
data$snow <- factor(data$snow)
data$cond <- factor(data$cond)
data$dir <- factor(data$dir)
str(data)
mean <- data.frame()
mode <- data.frame()
for (i in 2:nrow(data)){
if (is.numeric(i) == FALSE){
mode[,i] <- aggregate(data$i, list(Date=data$day), mode)
}
if (is.numeric(i) == TRUE){
mean[,i] <- aggregate(data$i, list(Date=data$day), mean)
}
}
#mean_temp <- aggregate(data$temp, list(Date=data$day), mean)
for (i in 2:nrow(data)){
if (is.numeric(i) == FALSE){
mode[,i] <- aggregate(i, list(Date=data$day), mode)
}
if (is.numeric(i) == TRUE){
mean[,i] <- aggregate(i, list(Date=data$day), mean)
}
}
for (i in 2:nrow(data)){
if (is.numeric(i) == FALSE){
mode[,i] <- aggregate(data[,i], list(Date=data$day), mode)
}
if (is.numeric(i) == TRUE){
mean[,i] <- aggregate(data[,i], list(Date=data$day), mean)
}
}
for (i in 2:nrow(data)){
if (is.numeric(i) == FALSE){
mode[,i] <- aggregate(data$i, list(Date=data$day), mode)
}
if (is.numeric(i) == TRUE){
mean[,i] <- aggregate(data$i, list(Date=data$day), mean)
}
}
# Load CampusNet Merged Data
df <- read.csv("~/Github/02441_Applied_Statistics/Case2/2_Data/merged_data.csv", header=TRUE, sep=",")
# Set new directory for output files
setwd("~/Github/02441_Applied_Statistics/Case2/4_Images")
lm2 <- step(lm(consumption~(.+ I(21-temp) -temp)^2, data = df_2), scope = ~.^4, k = log(nrow(df)), trace = FALSE)
df_2 <- df[,-c(1,2,5,8,9)] # erase attributes that are not important
lm2 <- step(lm(consumption~(.+ I(21-temp) -temp)^2, data = df_2), scope = ~.^4, k = log(nrow(df)), trace = FALSE)
drop1(lm2, test = "F")
Anova(lm2)
par(mfrow=c(2,2))
plot(lm2)
bc2 <-boxCox(lm2, lambda = seq(0, 5, by = 0.05))
bc2$x[ which.max(bc2$y) ]
# Load Data ---------------------------------------------------------------
require("car")
Anova(lm2)
par(mfrow=c(2,2))
plot(lm2)
bc2 <-boxCox(lm2, lambda = seq(0, 5, by = 0.05))
bc2$x[ which.max(bc2$y) ]
lm2 <- step(lm(consumption~(.+ I(21-temp) -temp)^2, data = df_2), scope = ~.^4, k = log(nrow(df_2)), trace = FALSE)
df_2 <- df[,-c(1,5,8,9)] # erase attributes that are not important
pairs(df_2, col=temp_interval)
# Pairs plot
temp_interval <- cut(df$temp, 3) # divide temperature in intervals to colour
pairs(df_2, col=temp_interval)
pairs(df_2, col=df_2$ID)
