# Integrate the circuit
circEnv = integrator(circEnv)
# Plot the circuit
plot(x=circEnv, ids.nlevels=c("X", "Y"), xlim=c(0,20), ylim=c(0,1), xlab="Times", ylab="x", main="Two-node oscillator")
print(plot)
###### Built a two-node oscillator circuit #######
# Define the nodes of the circuit
cn1 <- node(id="X", beta=c(0,1))
cn2 <- node(id="Y", beta=c(0,1))
# Create the node list
nodeList <- list("X"=cn1, "Y"=cn2)
circ <- circuit(cnodes=nodeList)
circ <- set_edge(circ, source="X", target="Y", e=1, k=0.5)
# Build a data frame
edat = data.frame(source=c("X", "Y"), target=c("Y", "X"), e=c(1,-1),
k=c(0.5, 0.5), n=c(Inf, Inf), stringsAsFactors=FALSE)
circ = set_edges(x=circ, dat=edat)
# Build the circuit environment
circEnv <- circuitEnv(circ, times=seq(0,20, 0.01))
circEnv <- set_nlevels(x=circEnv, nlevels=c("X"=1,"Y"=1), t.st=0, t.en=0)
circEnv <- set_signals(x=circEnv, signals=c("X"=1,"Y"=1), t.st=c(1,0), t.en=c(15,20))
# Integrate the circuit
circEnv = integrator(circEnv)
# Plot the circuit
plot(x=circEnv, ids.nlevels=c("X", "Y"), xlim=c(0,20), ylim=c(0,1), xlab="Times", ylab="x", main="Two-node oscillator")
print(plot)
###### Built a three-node oscillator circuit #######
# Define the nodes of the circuit
cn1 <- node(id="X", beta=c(0,1))
cn2 <- node(id="Y", beta=c(0,1))
cn3 <- node(id="Z", beta=c(0,1))
# Create the node list
nodeList <- list("X"=cn1, "Y"=cn2, "Z"=cn3)
circ <- circuit(cnodes=nodeList)
# Build a data frame
edat = data.frame(source=c("X", "Y", "Z"), target=c("Z", "Y", "X"), e=c(-1,-1, -1),
k=c(0.5, 0.5, 0.5), n=c(Inf, Inf, Inf), stringsAsFactors=FALSE)
circ = set_edges(x=circ, dat=edat)
# Build the circuit environment
circEnv <- circuitEnv(circ, times=seq(0,20, 0.01))
circEnv <- set_nlevels(x=circEnv, nlevels=c("X"=1,"Y"=1, "Z"=1), t.st=0, t.en=0)
circEnv <- set_signals(x=circEnv, signals=c("X"=1,"Y"=1, "z"=1), t.st=c(2,0,0), t.en=c(16,20, 20))
# Integrate the circuit
circEnv = integrator(circEnv)
# Plot the circuit
plot(x=circEnv, ids.nlevels=c("X", "Y", "Z"), xlim=c(0,20), ylim=c(0,1), xlab="Times", ylab="x", main="Two-node oscillator")
print(plot)
###### Built a three-node oscillator circuit #######
# Define the nodes of the circuit
cn1 <- node(id="X", beta=c(0,1))
cn2 <- node(id="Y", beta=c(0,1))
cn3 <- node(id="Z", beta=c(0,1))
# Create the node list
nodeList <- list("X"=cn1, "Y"=cn2, "Z"=cn3)
circ <- circuit(cnodes=nodeList)
# Build a data frame
edat = data.frame(source=c("X", "Y", "Z"), target=c("Z", "Y", "X"), e=c(-1,-1, -1),
k=c(0.25, 0.25, 0.25), n=c(Inf, Inf, Inf), stringsAsFactors=FALSE)
circ = set_edges(x=circ, dat=edat)
# Build the circuit environment
circEnv <- circuitEnv(circ, times=seq(0,20, 0.01))
circEnv <- set_nlevels(x=circEnv, nlevels=c("X"=1,"Y"=1, "Z"=1), t.st=0, t.en=0)
circEnv <- set_signals(x=circEnv, signals=c("X"=1,"Y"=1, "z"=1), t.st=c(2,0,0), t.en=c(16,20, 20))
# Integrate the circuit
circEnv = integrator(circEnv)
# Plot the circuit
plot(x=circEnv, ids.nlevels=c("X", "Y", "Z"), xlim=c(0,20), ylim=c(0,1), xlab="Times", ylab="x", main="Two-node oscillator")
print(plot)
###### Built a three-node oscillator circuit #######
# Define the nodes of the circuit
cn1 <- node(id="X", beta=c(0,1))
cn2 <- node(id="Y", beta=c(0,1))
cn3 <- node(id="Z", beta=c(0,1))
# Create the node list
nodeList <- list("X"=cn1, "Y"=cn2, "Z"=cn3)
circ <- circuit(cnodes=nodeList)
# Build a data frame
edat = data.frame(source=c("X", "Y", "Z"), target=c("Z", "Y", "X"), e=c(-1,-1, -1),
k=c(0.25, 0.25, 0.25), n=c(Inf, Inf, Inf), stringsAsFactors=FALSE)
circ = set_edges(x=circ, dat=edat)
# Build the circuit environment
circEnv <- circuitEnv(circ, times=seq(0,20, 0.01))
circEnv <- set_nlevels(x=circEnv, nlevels=c("X"=1,"Y"=1, "Z"=1), t.st=0, t.en=0)
circEnv <- set_signals(x=circEnv, signals=c("X"=1,"Y"=1, "Z"=1), t.st=c(2,0,0), t.en=c(16,20, 20))
# Integrate the circuit
circEnv = integrator(circEnv)
# Plot the circuit
plot(x=circEnv, ids.nlevels=c("X", "Y", "Z"), xlim=c(0,20), ylim=c(0,1), xlab="Times", ylab="x", main="Two-node oscillator")
print(plot)
###### Built a three-node oscillator circuit #######
# Define the nodes of the circuit
cn1 <- node(id="X", alpha=1, beta=c(0,1))
cn2 <- node(id="Y", alpha=1, beta=c(0,1))
cn3 <- node(id="Z", alpha=1, beta=c(0,1))
# Create the node list
nodeList <- list("X"=cn1, "Y"=cn2, "Z"=cn3)
circ <- circuit(cnodes=nodeList)
# Build a data frame
edat = data.frame(source=c("X", "Y", "Z"), target=c("Z", "Y", "X"), e=c(-1,-1, -1),
k=c(0.25, 0.25, 0.25), n=c(Inf, Inf, Inf), stringsAsFactors=FALSE)
circ = set_edges(x=circ, dat=edat)
# Build the circuit environment
circEnv <- circuitEnv(circ, times=seq(0,20, 0.01))
circEnv <- set_nlevels(x=circEnv, nlevels=c("X"=1,"Y"=1, "Z"=1), t.st=0, t.en=0)
circEnv <- set_signals(x=circEnv, signals=c("X"=1,"Y"=1, "Z"=1), t.st=c(2,0,0), t.en=c(16,20, 20))
# Integrate the circuit
circEnv = integrator(circEnv)
# Plot the circuit
plot(x=circEnv, ids.nlevels=c("X", "Y", "Z"), xlim=c(0,20), ylim=c(0,1), xlab="Times", ylab="x", main="Two-node oscillator")
print(plot)
###### Built a three-node oscillator circuit #######
# Define the nodes of the circuit
cn1 <- node(id="X", alpha=1, beta=c(0,1))
cn2 <- node(id="Y", alpha=1, beta=c(0,1))
cn3 <- node(id="Z", alpha=1, beta=c(0,1))
# Create the node list
nodeList <- list("X"=cn1, "Y"=cn2, "Z"=cn3)
circ <- circuit(cnodes=nodeList)
# Build a data frame
edat = data.frame(source=c("X", "Y", "Z"), target=c("Z", "Y", "X"), e=c(-1,-1, -1),
k=c(0.25, 0.25, 0.25), n=c(Inf, Inf, Inf), stringsAsFactors=FALSE)
circ = set_edges(x=circ, dat=edat)
# Build the circuit environment
circEnv <- circuitEnv(circ, times=seq(0,20, 0.01))
circEnv <- set_nlevels(x=circEnv, nlevels=c("X"=0,"Y"=1, "Z"=1), t.st=0, t.en=0)
circEnv <- set_signals(x=circEnv, signals=c("X"=1,"Y"=1, "Z"=1), t.st=c(2,0,0), t.en=c(16,20,20))
# Integrate the circuit
circEnv = integrator(circEnv)
# Plot the circuit
plot(x=circEnv, ids.nlevels=c("X", "Y", "Z"), xlim=c(0,20), ylim=c(0,1), xlab="Times", ylab="x", main="Three-node oscillator")
print(plot)
###### Built a three-node oscillator circuit #######
# Define the nodes of the circuit
cn1 <- node(id="X", alpha=1, beta=c(0,1))
cn2 <- node(id="Y", alpha=1, beta=c(0,1))
cn3 <- node(id="Z", alpha=1, beta=c(0,1))
# Create the node list
nodeList <- list("X"=cn1, "Y"=cn2, "Z"=cn3)
circ <- circuit(cnodes=nodeList)
# Build a data frame
edat = data.frame(source=c("X", "Y", "Z"), target=c("Z", "X", "Y"), e=c(-1,-1, -1),
k=c(0.5, 0.5, 0.5), n=c(Inf, Inf, Inf), stringsAsFactors=FALSE)
circ = set_edges(x=circ, dat=edat)
# Build the circuit environment
circEnv <- circuitEnv(circ, times=seq(0,20, 0.01))
circEnv <- set_nlevels(x=circEnv, nlevels=c("X"=0,"Y"=1, "Z"=1), t.st=0, t.en=0)
circEnv <- set_signals(x=circEnv, signals=c("X"=1,"Y"=1, "Z"=1), t.st=c(2,0,0), t.en=c(16,20,20))
# Integrate the circuit
circEnv = integrator(circEnv)
# Plot the circuit
plot(x=circEnv, ids.nlevels=c("X", "Y", "Z"), xlim=c(0,20), ylim=c(0,1), xlab="Times", ylab="x", main="Three-node oscillator")
print(plot)
install.packages("igraph")
library(igraph)
###### Built a three-node oscillator circuit #######
# Define the nodes of the circuit
cn1 <- node(id="X", alpha=1, beta=c(0,1))
cn2 <- node(id="Y", alpha=1, beta=c(0,1))
cn3 <- node(id="Z", alpha=1, beta=c(0,1))
# Create the node list
nodeList <- list("X"=cn1, "Y"=cn2, "Z"=cn3)
circ <- circuit(cnodes=nodeList)
# Build a data frame
edat = data.frame(source=c("X", "Y", "Z"), target=c("Z", "X", "Y"), e=c(-1,-1, -1),
k=c(0.25, 0.25, 0.25), n=c(Inf, Inf, Inf), stringsAsFactors=FALSE)
circ = set_edges(x=circ, dat=edat)
# Plot the circuit nodes/edges
ig <- graph_from_data_frame(d=df, vertices=data.frame(id=c("X","Y","Z")), directed=TRUE)
plot(ig)
# Build the circuit environment
circEnv <- circuitEnv(circ, times=seq(0,20, 0.01))
circEnv <- set_nlevels(x=circEnv, nlevels=c("X"=0,"Y"=1, "Z"=1), t.st=0, t.en=0)
circEnv <- set_signals(x=circEnv, signals=c("X"=1,"Y"=1, "Z"=1), t.st=c(2,0,0), t.en=c(16,20,20))
# Integrate the circuit
circEnv = integrator(circEnv)
# Plot the circuit levels
plot(x=circEnv, ids.nlevels=c("X", "Y", "Z"), xlim=c(0,20), ylim=c(0,1), xlab="Times", ylab="x", main="Repressilator")
print(plot)
###### Built a three-node oscillator circuit #######
# Define the nodes of the circuit
cn1 <- node(id="X", alpha=1, beta=c(0,1))
cn2 <- node(id="Y", alpha=1, beta=c(0,1))
cn3 <- node(id="Z", alpha=1, beta=c(0,1))
# Create the node list
nodeList <- list("X"=cn1, "Y"=cn2, "Z"=cn3)
circ <- circuit(cnodes=nodeList)
# Build a data frame
edat = data.frame(source=c("X", "Y", "Z"), target=c("Z", "X", "Y"), e=c(-1,-1, -1),
k=c(0.25, 0.25, 0.25), n=c(Inf, Inf, Inf), stringsAsFactors=FALSE)
circ = set_edges(x=circ, dat=edat)
# Plot the circuit nodes/edges
ig <- graph_from_data_frame(d=df, vertices=data.frame(id=c("X","Y","Z")), directed=TRUE)
print(plot(ig))
# Build the circuit environment
circEnv <- circuitEnv(circ, times=seq(0,20, 0.01))
circEnv <- set_nlevels(x=circEnv, nlevels=c("X"=0,"Y"=1, "Z"=1), t.st=0, t.en=0)
circEnv <- set_signals(x=circEnv, signals=c("X"=1,"Y"=1, "Z"=1), t.st=c(2,0,0), t.en=c(16,20,20))
# Integrate the circuit
circEnv = integrator(circEnv)
# Plot the circuit levels
plot(x=circEnv, ids.nlevels=c("X", "Y", "Z"), xlim=c(0,20), ylim=c(0,1), xlab="Times", ylab="x", main="Repressilator")
print(plot)
print(plot(ig))
###### Built a three-node oscillator circuit #######
# Define the nodes of the circuit
cn1 <- node(id="X", alpha=1, beta=c(0,1))
cn2 <- node(id="Y", alpha=1, beta=c(0,1))
cn3 <- node(id="Z", alpha=1, beta=c(0,1))
# Create the node list
nodeList <- list("X"=cn1, "Y"=cn2, "Z"=cn3)
circ <- circuit(cnodes=nodeList)
# Build a data frame
edat = data.frame(source=c("X", "Y", "Z"), target=c("Z", "X", "Y"), e=c(-1,-1, -1),
k=c(0.25, 0.25, 0.25), n=c(Inf, Inf, Inf), stringsAsFactors=FALSE)
circ = set_edges(x=circ, dat=edat)
# Plot the circuit nodes/edges
ig = graph_from_data_frame(d=df, vertices=data.frame(id=c("X","Y","Z")), directed=TRUE)
print(plot(ig))
# Build the circuit environment
circEnv <- circuitEnv(circ, times=seq(0,20, 0.01))
circEnv <- set_nlevels(x=circEnv, nlevels=c("X"=0,"Y"=1, "Z"=1), t.st=0, t.en=0)
circEnv <- set_signals(x=circEnv, signals=c("X"=1,"Y"=1, "Z"=1), t.st=c(2,0,0), t.en=c(16,20,20))
# Integrate the circuit
circEnv = integrator(circEnv)
# Plot the circuit levels
plot(x=circEnv, ids.nlevels=c("X", "Y", "Z"), xlim=c(0,20), ylim=c(0,1), xlab="Times", ylab="x", main="Repressilator")
print(plot)
library(igraph)
###### Built a three-node oscillator circuit #######
# Define the nodes of the circuit
cn1 <- node(id="X", alpha=1, beta=c(0,1))
cn2 <- node(id="Y", alpha=1, beta=c(0,1))
cn3 <- node(id="Z", alpha=1, beta=c(0,1))
# Create the node list
nodeList <- list("X"=cn1, "Y"=cn2, "Z"=cn3)
circ <- circuit(cnodes=nodeList)
# Build a data frame
edat = data.frame(source=c("X", "Y", "Z"), target=c("Z", "X", "Y"), e=c(-1,-1, -1),
k=c(0.25, 0.25, 0.25), n=c(Inf, Inf, Inf), stringsAsFactors=FALSE)
circ = set_edges(x=circ, dat=edat)
# Plot the circuit nodes/edges
ig = graph_from_data_frame(d=df, vertices=data.frame(id=c("X","Y","Z")), directed=TRUE)
print(plot(ig))
# Build the circuit environment
circEnv <- circuitEnv(circ, times=seq(0,20, 0.01))
circEnv <- set_nlevels(x=circEnv, nlevels=c("X"=0,"Y"=1, "Z"=1), t.st=0, t.en=0)
circEnv <- set_signals(x=circEnv, signals=c("X"=1,"Y"=1, "Z"=1), t.st=c(2,0,0), t.en=c(16,20,20))
# Integrate the circuit
circEnv = integrator(circEnv)
# Plot the circuit levels
plot(x=circEnv, ids.nlevels=c("X", "Y", "Z"), xlim=c(0,20), ylim=c(0,1), xlab="Times", ylab="x", main="Repressilator")
print(plot)
plot(ig)
###### Built a three-node oscillator circuit #######
# Define the nodes of the circuit
cn1 <- node(id="X", alpha=1, beta=c(0,1))
cn2 <- node(id="Y", alpha=1, beta=c(0,1))
cn3 <- node(id="Z", alpha=1, beta=c(0,1))
# Create the node list
nodeList <- list("X"=cn1, "Y"=cn2, "Z"=cn3)
circ <- circuit(cnodes=nodeList)
# Build a data frame
edat = data.frame(source=c("X", "Y", "Z"), target=c("Z", "X", "Y"), e=c(-1,-1, -1),
k=c(0.25, 0.25, 0.25), n=c(Inf, Inf, Inf), stringsAsFactors=FALSE)
circ = set_edges(x=circ, dat=edat)
# Plot the circuit nodes/edges
ig = graph_from_data_frame(d=edat, vertices=data.frame(id=c("X","Y","Z")), directed=TRUE)
print(plot(ig))
# Build the circuit environment
circEnv <- circuitEnv(circ, times=seq(0,20, 0.01))
circEnv <- set_nlevels(x=circEnv, nlevels=c("X"=0,"Y"=1, "Z"=1), t.st=0, t.en=0)
circEnv <- set_signals(x=circEnv, signals=c("X"=1,"Y"=1, "Z"=1), t.st=c(2,0,0), t.en=c(16,20,20))
# Integrate the circuit
circEnv = integrator(circEnv)
# Plot the circuit levels
plot(x=circEnv, ids.nlevels=c("X", "Y", "Z"), xlim=c(0,20), ylim=c(0,1), xlab="Times", ylab="x", main="Repressilator")
print(plot)
###### Built a two-node oscillator circuit #######
# Define the nodes of the circuit
cn1 <- node(id="X", beta=c(0,1))
cn2 <- node(id="Y", beta=c(0,1))
# Create the node list
nodeList <- list("X"=cn1, "Y"=cn2)
circ <- circuit(cnodes=nodeList)
# Build a data frame
edat = data.frame(source=c("X", "Y"), target=c("Y", "X"), e=c(1,-1),
k=c(0.5, 0.5), n=c(Inf, Inf), stringsAsFactors=FALSE)
circ = set_edges(x=circ, dat=edat)
# Plot the circuit nodes/edges
ig = graph_from_data_frame(d=edat, vertices=data.frame(id=c("X","Y")), directed=TRUE)
print(plot(ig))
# Build the circuit environment
circEnv <- circuitEnv(circ, times=seq(0,20, 0.01))
circEnv <- set_nlevels(x=circEnv, nlevels=c("X"=1,"Y"=1), t.st=0, t.en=0)
circEnv <- set_signals(x=circEnv, signals=c("X"=1,"Y"=1), t.st=c(1,0), t.en=c(15,20))
# Integrate the circuit
circEnv = integrator(circEnv)
# Plot the circuit
plot(x=circEnv, ids.nlevels=c("X", "Y"), xlim=c(0,20), ylim=c(0,1), xlab="Times", ylab="x", main="Two-node oscillator")
print(plot)
###### Built a three-node oscillator circuit #######
# Define the nodes of the circuit
cn1 <- node(id="X", alpha=1, beta=c(0,1))
cn2 <- node(id="Y", alpha=1, beta=c(0,1))
cn3 <- node(id="Z", alpha=1, beta=c(0,1))
# Create the node list
nodeList <- list("X"=cn1, "Y"=cn2, "Z"=cn3)
circ <- circuit(cnodes=nodeList)
# Build a data frame
edat <- data.frame(source=c("X", "Y", "Z"), target=c("Z", "X", "Y"), e=c(-1,-1, -1),
k=c(0.25, 0.25, 0.25), n=c(Inf, Inf, Inf), stringsAsFactors=FALSE)
circ <- set_edges(x=circ, dat=edat)
# Plot the circuit nodes/edges
ig <- graph_from_data_frame(d=edat, vertices=data.frame(id=c("X","Y","Z")), directed=TRUE)
print(plot(ig))
# Build the circuit environment
circEnv <- circuitEnv(circ, times=seq(0,20, 0.01))
circEnv <- set_nlevels(x=circEnv, nlevels=c("X"=0,"Y"=1, "Z"=1), t.st=0, t.en=0)
circEnv <- set_signals(x=circEnv, signals=c("X"=1,"Y"=1, "Z"=1), t.st=c(2,0,0), t.en=c(16,20,20))
# Integrate the circuit
circEnv <- integrator(circEnv)
# Plot the circuit levels
plot(x=circEnv, ids.nlevels=c("X", "Y", "Z"), xlim=c(0,20), ylim=c(0,1), xlab="Times", ylab="x", main="Repressilator")
print(plot)
#### Visualization the phase space trajectory ####
V <- get_state(x=rep8tre, attr="nlevels", times=seq(0,20, 0.01))
ssCols <- colorRampPalette(brewer.pal(11,"Spectral"))
colorBar <- function(colFcn, yMin=1, yMax=10, divs=100) {
z <- matrix(1:divs, nrow=1)
y <- seq(yMin, yMax, len=divs)
image(1, y, z, col=colFcn(divs), axes=FALSE, xlab="", ylab="" )
axis(2, las=2)
}
plot(V)
layout(mat=matrix(c(1,2), 1,2), widths=c(3,1))
plot(V[lgc, "X"], V[lgc, "Y"], pch=19, xlab="[X]", ylab="[Y]",
main="X-Y phase space", col=ssCols(sum(lgc)))
lgc <- 0 < times & times < 8
layout(mat=matrix(c(1,2), 1,2), widths=c(3,1))
plot(V[lgc, "X"], V[lgc, "Y"], pch=19, xlab="[X]", ylab="[Y]",
main="X-Y phase space", col=ssCols(sum(lgc)))
lgc <- 0 < times & times < 8
layout(mat=matrix(c(1,2), 1,2), widths=c(3,1))
plot(V[lgc, "X"], V[lgc, "Y"], pch=19, xlab="[X]", ylab="[Y]",
main="X-Y phase space", col=ssCols(sum(lgc)))
times <- seq(0, 20, 0.01) ## as defined for the circuit environment
lgc <- 0 < times & times < 8
layout(mat=matrix(c(1,2), 1,2), widths=c(3,1))
plot(V[lgc, "X"], V[lgc, "Y"], pch=19, xlab="[X]", ylab="[Y]",
main="X-Y phase space", col=ssCols(sum(lgc)))
###### Built a three-node oscillator circuit #######
# Define the nodes of the circuit
cn1 <- node(id="X", alpha=1, beta=c(0,1))
cn2 <- node(id="Y", alpha=1, beta=c(0,1))
cn3 <- node(id="Z", alpha=1, beta=c(0,1))
# Create the node list
nodeList <- list("X"=cn1, "Y"=cn2, "Z"=cn3)
circ <- circuit(cnodes=nodeList)
# Build a data frame
edat <- data.frame(source=c("X", "Y", "Z"), target=c("Z", "X", "Y"), e=c(-1,-1, -1),
k=c(0.25, 0.25, 0.25), n=c(Inf, Inf, Inf), stringsAsFactors=FALSE)
circ <- set_edges(x=circ, dat=edat)
# Plot the circuit nodes/edges
ig <- graph_from_data_frame(d=edat, vertices=data.frame(id=c("X","Y","Z")), directed=TRUE)
print(plot(ig))
# Build the circuit environment
circEnv <- circuitEnv(circ, times=seq(0,20, 0.01))
circEnv <- set_nlevels(x=circEnv, nlevels=c("X"=0,"Y"=1, "Z"=1), t.st=0, t.en=0)
circEnv <- set_signals(x=circEnv, signals=c("X"=1,"Y"=1, "Z"=1), t.st=c(2,0,0), t.en=c(16,20,20))
# Integrate the circuit
circEnv <- integrator(circEnv)
# Plot the circuit levels
plot(x=circEnv, ids.nlevels=c("X", "Y", "Z"), xlim=c(0,20), ylim=c(0,1), xlab="Times", ylab="x", main="Repressilator")
print(plot)
#### Visualization the phase space trajectory ####
V <- get_state(x=rep8tre, attr="nlevels", times=seq(0,20, 0.01))
ssCols <- colorRampPalette(brewer.pal(11,"Spectral"))
colorBar <- function(colFcn, yMin=1, yMax=10, divs=100) {
z <- matrix(1:divs, nrow=1)
y <- seq(yMin, yMax, len=divs)
image(1, y, z, col=colFcn(divs), axes=FALSE, xlab="", ylab="" )
axis(2, las=2)
}
times <- seq(0, 20, 0.01) ## as defined for the circuit environment
lgc <- 0 < times & times < 8
layout(mat=matrix(c(1,2), 1,2), widths=c(3,1))
plot(V[lgc, "X"], V[lgc, "Y"], pch=19, xlab="[X]", ylab="[Y]",
main="X-Y phase space", col=ssCols(sum(lgc)))
colorBar(ssCols, 0, 8, main="time")
y <- 3
y
x <- c(1, 4, 6, 2)
x
x <- 1:10
x
x <- seq(0,1 by=0.1)
x <- seq(0,1, by=0.1)
x
mean(x)
var(x)
sd(x)
median(x)
quantile(x, c(0.25, 0.5, 0.75))
cov(x, y)
x <- c(168, 161, 167,179, 184, 166, 198, 187, 191, 179)
mean(x)
median(x)
var(x)
sd(x)
quantile(x, type=2)
quantile(x, probs=seq(0,1,by=0.1), type=2)
hist(X)
hist(x)
hist(x, prob=TRUE, col="red", nclass=8)
plot(ecdf(x), verticals=TRUE)
boxplot(x, range=0, col="red", main="Basic box plot")
## Add the blue text
text(1.3, quantile(x), c("Minimum","Q1","Median","Q3","Maximum"),
col="blue")
boxplot(c(x, 235), col="red", main="Modified box plot")
boxplot(c(x, 235), col="red", main="Modified box plot")
boxplot(c(x, 235), col="red", main="Basic box plot", range=0)
require("car")
require("tidyverse")
library("stringr")
require("readxl")
# Visualization packages
require("xtable")
require("ggpubr")
require("ggplot2")
require("ggExtra")
require("GGally")
require('ggcorrplot')
require("wesanderson")
htk <- read_excel("~/Github/02441_Applied_Statistics/Case2/2_Data/HTK_building_data_share.xlsx")
View(htk)
# Load CampusNet Merged Data
df <- read_csv("~/Github/02441_Applied_Statistics/Case2/2_Data/merged_data.csv")
# Set new directory for output files
setwd("~/Github/02441_Applied_Statistics/Case2/4_Images")
# Inspect Data
str(df)
summary(df)
sum_df <- summary(df)
print(xtable(sum_df, type = "latex"), file = "summary_df.tex")
Factorize variables
df$date <- factor(df$date)
df$ID <- factor(df$ID)
df$dir <- factor(df$dir)
df$cond <- factor(df$cond)
plot(fog~cond, df)
plot(rain~cond, df) #it doesn't seem that condition gives interpretable info
df <- df[,-c(8,9,11,12)]
# Split building type from HTK file
type <- data.frame(str_split_fixed(htk$Anvendelse, " ", 2))
View(type)
type_building <-type
type_building <- unique(type_building)
colnames(type_building) <- c("type", "name") # rename columns
type_building <- type_building[order(type_building$type),]
View(type_building)
new_df <- merge(df, id_type ,by="ID")
new_df <- merge(df, id_type ,by="ID")
# Split building type from HTK file
type <- data.frame(str_split_fixed(htk$Anvendelse, " ", 2))
# dataframe with type code and name
type_building <-type
type_building <- unique(type_building)
colnames(type_building) <- c("type", "name") # rename columns
type_building <- type_building[order(type_building$type),]
# data frame with only type code
type <- type[,-2]
id_type <- cbind.data.frame(htk$Målernr, type)  # merge ID and type
colnames(id_type) <- c("ID", "type") # rename columns
# Now add new type column to the df
new_df <- merge(df, id_type ,by="ID")
View(new_df)
df <- merge(df, id_type ,by="ID")
plot(df$temp, df$consumption, type="p", col=df$ID, pch=19)
plot(consumption~temp, subset(df, ID==78185925), pch=19, col=2)
df <- df[-c(3282,3357),] # Removing outliers 3282 and 3357
pairs(subset(df, select=c(4:6)))
cor.test(df$temp, df$dew_pt)
df <- df[,-5] # Correlation very high at 0.95, thus remove dew_pt
#Building plot type 032 / ID 78185925
# select type and make also building subset
type032 <- subset(df, col=df$type, type =="032", select = ID:type)
id78185925 <- subset(type032, col=type032$ID, ID =="78185925", select = ID:type)
outliers <- df[c(3282,3357),]
#png(filename="78185925.png", width=1750, height=1050, res=300)
p1 <- ggplot() + geom_point(data=type032, aes(x=temp, y=consumption, col="ID 78185925",alpha=0.3)) + geom_point(data=id78185925, aes(x=temp, y=consumption, col="Other",alpha=0.3)) + geom_point(data=outliers, aes(x=temp, y=consumption, col="Outliers", alpha=0.3))
p1 + scale_color_manual(guide = guide_legend(),values=c("#899DA4","#DC863B","#C93312"), name="Sports and swimming (type = 032)") +  xlab("Temperature ºC") + ylab("Consumption") + theme_classic() + theme(legend.position ="bottom",legend.box = 'horizontal', )
#dev.off()
# Plot consumption sum vs type of building
# list of 25 colors for type
mix_cols = c("#D8B70A", "#02523B", "#A2A475", "#81A88D", "#000000","#899DA4", "#98E3DD", "#FAEFD1", "#DC863B","#F1BB7B", "#FD6467", "#5B1A18", "#D67236","#DD8D29", "#E2D200", "#46ACC8", "#E58601", "#B40F20","#A42820", "#5F5647", "#9B110E", "#3F5151", "#4E2A1E","#E6A0C4", "#0C1707")
# aggregate consumption SUM
consumption_sum <- aggregate(df$consumption,list(df$type), sum)
colnames(consumption_sum) <- c("type", "cons") # rename columns
#png(filename="consum_type.png", width=1750, height=1050, res=300)
p2 <- ggplot(data=consumption_sum, aes(x=type, y=cons, fill=type, alpha=0.3)) + geom_bar(stat="identity",show.legend = FALSE)
p2 + scale_fill_manual(values=mix_cols) + xlab("Type of building") + ylab("Consumption") + theme_classic()
#dev.off()
# plot Consumption - date
cons_date_sum <- aggregate(df$consumption,list(id11= df$type, id12= df$date), sum)
colnames(cons_date_sum) <- c("type", "date", "cons") # rename columns
cons_date_sum$date <- as.numeric(cons_date_sum$date)
cons_date_sum$rank <- rank(cons_date_sum$date)
#png(filename="consum_type_date.png", width=1750, height=1050, res=300)
p3 <- ggplot(data=cons_date_sum, aes(x=date, y=cons, col=type)) + geom_line()
p3 + scale_color_manual(values=mix_cols) + xlab("Date") + ylab("Consumption") + theme_classic()
#dev.off()
